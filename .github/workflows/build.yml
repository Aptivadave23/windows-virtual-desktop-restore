name: Build & Release
permissions:
  contents: write
  pull-requests: write

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review, edited]
  push:
    branches: [main, beta]
  workflow_dispatch: {}

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      # ✅ Build on PRs and pushes (incl. pushing to main)
      - name: Build (restore + compile)
        shell: pwsh
        run: |
          dotnet restore ./StartUp.sln
          dotnet build ./StartUp.sln -c Release --no-restore
      # (Optional) add tests:
      # - name: Test
      #   shell: pwsh
      #   run: dotnet test ./StartUp.sln -c Release --no-build --nologo

      # ---- Release path (only on push to main/beta) ----
      - name: Setup Node
        if: ${{ github.event_name == 'push' }}
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install semantic-release + plugins
        if: ${{ github.event_name == 'push' }}
        shell: pwsh
        run: |
          npm i -D semantic-release `
            '@semantic-release/commit-analyzer' `
            '@semantic-release/release-notes-generator' `
            '@semantic-release/changelog' `
            '@semantic-release/exec' `
            '@semantic-release/github'

      - name: Run semantic-release
        if: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Read release version
        if: ${{ github.event_name == 'push' }}
        id: relver
        shell: pwsh
        run: |
          if (Test-Path .next-release-version) {
            $v = Get-Content .next-release-version -Raw
            "version=$v" >> $env:GITHUB_OUTPUT
          } else {
            "version=" >> $env:GITHUB_OUTPUT
          }

      # ---- Signed release PR: commit bump + auto-approve + auto-merge ----
      # Import your GPG key and configure git to sign
      - name: Import GPG key for signing
        if: ${{ github.event_name == 'push' && steps.relver.outputs.version != '' }}
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_config_global: true
          git_user_name: "Aptivadave23"
          git_user_email: "Aptivadave23@users.noreply.github.com"

      # Create a signed commit with the bump on a release branch
      - name: Commit bump (signed) to release branch
        if: ${{ github.event_name == 'push' && steps.relver.outputs.version != '' }}
        id: signed-commit
        shell: pwsh
        run: |
          $branch = "release/${{ steps.relver.outputs.version }}"
          git checkout -b $branch
          git add CHANGELOG.md StartUp.csproj
          if (-not (git diff --cached --name-only)) {
            "skip=true" >> $env:GITHUB_OUTPUT
            exit 0
          }
          # sign (-S) with the imported GPG key
          git commit -S -m "chore(release): ${{ steps.relver.outputs.version }}"
          git push origin HEAD:$branch

      # Open (or update) the PR from that branch
      - name: Open PR for signed bump
        if: ${{ github.event_name == 'push' && steps.relver.outputs.version != '' && steps.signed-commit.outputs.skip != 'true' }}
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "chore(release): ${{ steps.relver.outputs.version }}"
          body: "Autogenerated changelog and version bump for ${{ steps.relver.outputs.version }}."
          base: ${{ github.ref_name }}               # main or beta
          branch: "release/${{ steps.relver.outputs.version }}"
          # no add-paths/commit-message here since we already committed

      # Auto-approve the PR (satisfies "1 approving review")
      - name: Auto-approve release PR
        if: ${{ github.event_name == 'push' && steps.cpr.outputs.pull-request-number != '' }}
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.AUTO_APPROVE_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}

      # Enable auto-merge (squash). It will merge once PR checks pass.
      - name: Enable auto-merge for release PR
        if: ${{ github.event_name == 'push' && steps.cpr.outputs.pull-request-number != '' }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash
